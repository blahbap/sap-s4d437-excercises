managed implementation in class zbp_10_i_travel unique;

with draft;

define behavior for Z10_I_TRAVEL //alias <alias_name>
persistent table z10_travel
draft table z10_travel_d
lock master
total etag ChangedAt
etag master LocalChangedAt
authorization master ( instance )
{
  create;

  update ( features : instance );

  // field ( mandatory ) CustomerID, StartDate, EndDate;
  field ( mandatory ) EndDate;
  field ( features : instance ) CustomerID, StartDate;

  delete;

  draft action Edit;
  draft action Activate;
  draft action Discard;
  draft action Resume;

  mapping for Z10_TRAVEL corresponding
  {
    AgencyID = agencynum;
    TravelDescription = trdesc;
    CustomerID = customid;
    StartDate = stdat;
    EndDate = enddat;
    ChangedAt = changed_at;
    ChangedBy = changed_by;
  }

  action ( features : instance ) set_to_cancelled;
  //validation validateCustomer on save { field CustomerID; }
  validation validateCustomer on save
  { create;
    field CustomerID;
  }
  validation validateStartDate on save
  { create;
    field StartDate;
  }
  validation validateEndDate on save
  { create;
    field EndDate;
  }
  validation validateSequence on save
  { create;
    field StartDate, EndDate;
  }

  determination determineSemanticKey on modify { create; }

  association _TravelItem { with draft; }

}

define behavior for z10_I_TravelItem alias Item
persistent table d437e_tritem
draft table d437e_tritem_d
lock dependent by _Travel
authorization dependent by _Travel
etag master LocalChangedAt
{

  field ( readonly, numbering : managed ) Itguid;
  field ( readonly ) AgencyID, TravelId, ItemID, Trguid;
  association _Travel { with draft; }

  mapping for z10_tritem

  {

    Itguid = itguid;

    AgencyID = agencynum;

    TravelId = travelid;

    ItemID = tritemno;

    Trguid = trguid;

    CarrierId = carrid;

    ConnectionId = connid;

    FlightDate = fldate;

    BookingId = bookid;

    FlightClass = class;

    PassengerName = passname;

    CreatedAt = created_at;

    CreatedBy = created_by;

    ChangedAt = changed_at;

    ChangedBy = changed_by;

    LocalChangedAt = loc_changed_at;

  }


}